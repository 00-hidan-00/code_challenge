import asyncio
import random

from faker import Faker


# üß† –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ: asyncio –∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ

# –ó–∞–¥–∞–Ω–∏–µ 1: –ü—Ä–æ—Å—Ç–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
# –ù–∞–ø–∏—à–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é delayed_print(text, delay), –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø–µ—á–∞—Ç–∞—Ç—å text –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è delay —Å–µ–∫—É–Ω–¥.

# –ó–∞–¥–∞–Ω–∏–µ 2: –ù–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
# –ò—Å–ø–æ–ª—å–∑—É—è asyncio.gather, –∑–∞–ø—É—Å—Ç–∏ 3 –≤—ã–∑–æ–≤–∞ delayed_print() —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏ –∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏.
# –£–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ.

async def delayed_print(text: str, delay: int) -> None:
    await asyncio.sleep(delay)
    print(f"{text} after {delay} seconds")


# async def main():
#     tasks = [
#         asyncio.create_task(delayed_print('text', second))
#         for second in [random.randint(1, 5) for _ in range(5)]
#     ]
#
#     # await asyncio.wait(tasks)
#     await asyncio.gather(*tasks)


# –ó–∞–¥–∞–Ω–∏–µ 3: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
# –ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ URL-–∞–¥—Ä–µ—Å–æ–≤. –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é fetch_url(url),
# –∫–æ—Ç–æ—Ä–∞—è –∏–º–∏—Ç–∏—Ä—É–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é asyncio.sleep().
# –ó–∞—Ç–µ–º –Ω–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é fetch_all(urls), –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–æ –≤—Å–µ—Ö URL.
# urls = [
#     "https://example.com/page1",
#     "https://example.com/page2",
#     "https://example.com/page3"
# ]

async def fetch_url(url: str) -> None:
    await asyncio.sleep(random.randint(1, 5))
    print(f'–ò–º–∏—Ç–∏—Ä—É—é –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–∏—Å–∞ {url}')


async def fetch_all(urls: list[str]) -> None:
    tasks = [asyncio.create_task(fetch_url(url)) for url in urls]
    await asyncio.wait(tasks)


# async def main():
#     t1 = time.time()
#     urls = [
#         "https://example.com/page1",
#         "https://example.com/page2",
#         "https://example.com/page3"
#     ]
#     await fetch_all(urls)
#     t2 = time.time()
#     print(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {t2 - t1:.2f} —Å–µ–∫—É–Ω–¥")


# –ó–∞–¥–∞–Ω–∏–µ 4: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
# –°–æ–∑–¥–∞–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä async_counter(n), –∫–æ—Ç–æ—Ä—ã–π –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –≤—ã–¥–∞–µ—Ç —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ n.

async def async_counter(n: int) -> int:
    for i in range(1, n + 1):
        await asyncio.sleep(1)
        yield i


# async def main():
#     async for number in async_counter(5):
#         print(number)


# üß™ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ #2: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ —Å asyncio

# –ó–∞–¥–∞–Ω–∏–µ 1: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞ (—Å–µ–º–∞—Ñ–æ—Ä—ã)
# –£ —Ç–µ–±—è –µ—Å—Ç—å 10 "–∑–∞–ø—Ä–æ—Å–æ–≤" (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–º–∏—Ç–∞—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å —Å–∞–π—Ç–æ–≤).
# –ù–æ —Ç—ã —Ö–æ—á–µ—à—å, —á—Ç–æ–±—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤—ã–ø–æ–ª–Ω—è–ª–æ—Å—å –Ω–µ –±–æ–ª—å—à–µ 3.
# –ò—Å–ø–æ–ª—å–∑—É–π asyncio.Semaphore, —á—Ç–æ–±—ã –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.
# –î–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π asyncio.sleep() —Å —Ä–∞–Ω–¥–æ–º–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π.

async def download_files(semaphore: asyncio.Semaphore) -> None:
    async with semaphore:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º
        time_sleep = random.randint(1, 5)
        await asyncio.sleep(time_sleep)
        print(f'–§–∞–π–ª —Å–∫–∞—á–µ–Ω, –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {time_sleep} —Å–µ–∫—É–Ω–¥')


# async def main():
#     tasks = [
#         asyncio.create_task(download_files(asyncio.Semaphore(3))) for i in range(10)
#     ]
#     await asyncio.wait(tasks)


# –ó–∞–¥–∞–Ω–∏–µ 2: –¢–∞–π–º–∞—É—Ç—ã
# –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é async def fetch_with_timeout(url, timeout), –∫–æ—Ç–æ—Ä–∞—è:
# –ü—ã—Ç–∞–µ—Ç—Å—è "–∑–∞–≥—Ä—É–∑–∏—Ç—å" –¥–∞–Ω–Ω—ã–µ —Å URL (–æ–ø—è—Ç—å –∂–µ, –∏–º–∏—Ç–∞—Ü–∏—è —á–µ—Ä–µ–∑ asyncio.sleep()).
# –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ–ª—å—à–µ timeout, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ asyncio.TimeoutError.

# –ó–∞–¥–∞–Ω–∏–µ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
# –£ —Ç–µ–±—è –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∏—Ö –º–æ–≥—É—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è —Å –æ—à–∏–±–∫–æ–π.
# –ó–∞–ø—É—Å—Ç–∏ –∏—Ö —á–µ—Ä–µ–∑ asyncio.gather(..., return_exceptions=True).
# –°–æ–±–µ—Ä–∏ –æ—Ç–¥–µ–ª—å–Ω–æ —É—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ—à–∏–±–∫–∏.

async def fetch_with_timeout(url: str, timeout: int):
    if timeout > 5:
        raise asyncio.TimeoutError(f"Timeout on {url} after {timeout} seconds")
    await asyncio.sleep(timeout)
    return f'{url} | {timeout}'


# async def main():
#     data_dict = {i: {'url': 'url_' + str(i), 'timeout': random.randint(1, 10)} for i in range(5)}
#     tasks = [
#         asyncio.create_task(fetch_with_timeout(url=item[1]['url'], timeout=item[1]['timeout']))
#         for item in data_dict.items()
#     ]
#
#     results = await asyncio.gather(*tasks, return_exceptions=True)
#
#     for result in results:
#         if isinstance(result, Exception):
#             print(f'‚ö†Ô∏è –û—à–∏–±–∫–∞: {result}')
#         else:
#             print(f'‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}')


# –ó–∞–¥–∞–Ω–∏–µ 4: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å (asyncio.Queue)
# –ò–º–ø–ª–µ–º–µ–Ω—Ç–∏—Ä—É–π –ø—Ä–æ—Å—Ç—É—é –º–æ–¥–µ–ª—å "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å-–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å":
# –û–¥–∏–Ω producer –∫–ª–∞–¥—ë—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ—á–µ—Ä–µ–¥—å (asyncio.Queue) —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏.
# –ù–µ—Å–∫–æ–ª—å–∫–æ consumer-–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2) —á–∏—Ç–∞—é—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∏ "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç" —ç–ª–µ–º–µ–Ω—Ç—ã (–ø–µ—á–∞—Ç–∞—é—Ç + –∑–∞–¥–µ—Ä–∂–∫–∞).


async def producer(queue) -> str:
    fake = Faker()
    while True:  # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        await asyncio.sleep(random.randint(1, 3))  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è–º–∏
        name = fake.name()  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–º–µ–Ω–∏
        await queue.put(name)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥—å
        print(f'Produced: {name}')


async def consumer(queue):
    while True:
        name = await queue.get()  # –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        sleep_for = random.randint(1, 3)
        await asyncio.sleep(sleep_for)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        print(f'Consumed: {name} | has slept for {sleep_for} seconds')
        queue.task_done()  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏


async def main():
    queue = asyncio.Queue(maxsize=5)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏

    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π
    tasks = [
        asyncio.create_task(consumer(queue))
        for _ in range(2)  # 2 –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è
    ]
    tasks.append(asyncio.create_task(producer(queue)))  # 1 –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å

    await asyncio.gather(*tasks)  # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á


if __name__ == "__main__":
    asyncio.run(main())
