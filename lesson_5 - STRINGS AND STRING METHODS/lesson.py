# Lesson notes:
# (https://spurious-factory-624.notion.site/560592326b57414c8e5f8afcc0ec05ba?pvs=4)

# Операции со строками

# Конкатенация (сложение строк)
def example_1():
    s1 = 'hello'
    s2 = 'world'
    print(s1 + ', ' + s2 + '!!')  # hello, world!!


# Умножение строки на число
def example_2():
    s = 'la'
    print(s * 3)  # lalala


# Длина строки
def example_3():
    s = 'qwerty'
    print(len(s))  # 6


# Сравнение строк

def example_4():
    # Примеры для практики
    print('abc' < 'ac')  # ...
    print('abc' > 'ab')  # ...
    print(420 > 5 and '420' > '5')  # ...


# Непечатные символы

"""
1. `\n` – перенос строки (new line)
2. `\t` – табуляция
3. `\` - символ экранирования
4. Остальные тут: https://pythonworld.ru/tipy-dannyx-v-python/stroki-literaly-strok.html
"""

# Кавычки
"""
1. Двойный кавычки - используются для создания строк)
2. Одинарные кавычки - используются для создания строк. Ничем не отличаются от двойных кавычек)
3. Тройные кавычки - используются как многострочный комментарий либо для создания большой строки (можно делать переносы строк)
"""


def example_5():
    # Примеры работы с кавычками
    # Для создания строки используем одинарные кавычки так как внутри используются двойные
    s1 = 'Он сказал: "привет"'
    # Для создания строки используем двойные кавычки так как внутри используются одинарные
    s2 = "He's a doctor"
    # Можно использовать двойные кавычки внутри двойных или одинарные внутри одинарных, если использовать символ экранирования
    s3 = "Он сказал: \"привет\""
    s4 = 'He\'s a doctor'
    # С помощью тройных каычек можно писать целые тексты (отступы и переносы троки будут учитываться)
    s5 = '''Я помню чудное мгновенье:
    	Передо мной явилась ты,
    Как мимолетное виденье,
    Как гений чистой красоты.

    В томленьях грусти безнадежной,
    В тревогах шумной суеты,
    Звучал мне долго голос нежный
    И снились милые черты.'''


# Перенос инструкции \
def example_6():
    # Имеется коробка со сторонами A x B x C. Определить, войдет ли она в дверь размером M x K
    A = int(input())
    B = int(input())
    C = int(input())
    M = int(input())
    K = int(input())
    if A < M and B < K or A < M and C < K or B < M and A < K or B < M and C < K or C < M and A < K or C < M and B < K:
        print('проходит')
    else:
        print('не проходит')


def example_7():
    # Имеется коробка со сторонами A x B x C. Определить, войдет ли она в дверь размером M x K
    A = int(input())
    B = int(input())
    C = int(input())
    M = int(input())
    K = int(input())
    if A < M and B < K or \
            A < M and C < K or \
            B < M and A < K or \
            B < M and C < K or \
            C < M and A < K or \
            C < M and B < K:
        print('проходит')
    else:
        print('не проходит')


## f-строки !!

# f-строки позволяют “встраивать” переменные прямо в строку:
def example_8():
    # синтаксис:
    a = 123
    s = f'какая-то строка {a}'

    # как было раньше:
    s1 = 'какая-то строка ' + str(a)


## Индексы в строке

# Работа с индексами в строке не отличается от работы с индексами в списке
def example_9():
    s = 'qwerty'
    print(s[0])  # q
    print(s[1])  # w
    print(s[2])  # e
    print(s[3])  # r
    print(s[4])  # t
    print(s[5])  # y
    print(s[6])  # string index out of range
    print(s[-1])  # y
    print(s[-2])  # t
    print(s[-3])  # r
    # ...


# Срезы
def example_10():
    # синтаксис:
    # str[start:stop:step]
    s = 'qwerty'
    print(s[1:3])  # we
    print(s[1:6:2])  # wry
    # если хотим сделать срез "от начала", то можно ничего не писать в start:
    print(s[:4])  # qwer
    # если хотим сделать срез "до конца", то можно ничего не писать в stop:
    print(s[3:])  # rty
    # сделаем срез от начала до конца с шагом 2
    print(s[::2])  # qet
    # можно использовать отрицательный шаг
    print(s[5:0:-2])  # yrw
    # можно вывести слова "с конца"
    print(s[::-1])  # ytrewq


# Строки через циклы
def example_11():
    # через цикл while:
    s = 'qwerty'
    i = 0
    while i < len(s):
        print(s[i])
        i += 1
    # выведет q w e r t y (в столбик)

    # через цикл for:
    s = 'qwerty'
    for ch in s:
        print(ch)

    # выведет q w e r t y (в столбик)

    # Последовательность вызовов
    def example_12():
        s = 'agTtcAGtc'
        s.upper().count('gt'.upper())  # 2

    """
    Вызовы происходя последовательно, но то, что в скобках имеет приоритет.
    1. .upper()
    2. 'gt'.upper() (так как находится в скобках метода .count()
    3. .count()
    """


def main():
    example_4()


if __name__ == "__main__":
    main()
