# Lesson notes:
# (https://spurious-factory-624.notion.site/631ba068a8904b41abdf43551c849fc0#1dae5df3463b435f886026a91ba99feb)


import requests


# Словари

# Синтаксис
def exemple_0():
    # синтаксис:
    dictionary = {'ключ1': 'значение1', 'ключ2': 'значение2'}

    # альтернативный синтаксис:
    dictionary = {
        'ключ1': 'значение1',
        'ключ2': 'значение2',
    }


# Создание словаря
def exemple_1():
    d = {
        'first': 'something',
        10: [1, 2, 3],
        True: False,
    }


# Получение доступа к элементам словаря
def exemple_2():
    d = {
        'first': 'something',
        10: [1, 2, 3],
        True: False,
    }

    # синтаксис:
    # название_словаря[ключ]

    print(d[10])  # [1, 2, 3]
    print(d['first'])  # 'something'
    print(d[True])  # False
    # print(d[0])  # KeyError (у словарей нет индексов!!!!!!!!!!!!)


# Добавление элемента в словарь
def exemple_3():
    d = {}

    # если добавить в словарь элемент по несуществующему ключу, ключ создастся
    d['a'] = 1  # d = {'a': 1}
    d['b'] = 2  # d = {'a': 1, 'b': 2}
    d['c'] = 3  # d = {'a': 1, 'b': 2, 'c': 3}
    # если добавить в словарь элемент по существующему ключу, он обновится
    d['a'] = 111  # d = {'a': 111, 'b': 2, 'c': 3}


# Изменение значений словаря
def exemple_4():
    d = {
        'a': 10,
        'b': 2,
        'c': 6,
    }

    print(d)  # {'a': 10, 'b': 2, 'c': 6}
    d['a'] = 999  #
    print(d)  # {'a': 999, 'b': 2, 'c': 6}
    d['b'] += 1
    print(d)  # {'a': 999, 'b': 3, 'c': 6}


# Проверка наличия ключа в словаре
def exemple_5():
    d = {
        'a': 10,
        'b': 2,
        'c': 6,
    }

    # выражение "ключ in словарь" вернет True, если "ключ" есть в "словаре". В ином случае вернет False
    key = 'a'
    if key in d:
        print(f'Ключ {key} есть в словаре')
    else:
        print(f'Ключа {key} нет в словаре')


# Удаление из словаря
def exemple_6():
    d = {
        'a': 10,
        'b': 2,
        'c': 6,
    }

    # чтобы удалить из словаря, пишем конструкцию:
    # del словарь[ключ]
    print(d)  # {'a': 10, 'b': 2, 'c': 6}
    del d['a']
    print(d)  # {'b': 2, 'c': 6}

    # удаление всех элементов:
    d.clear()
    print(d)  # {}


# Объединение словарей
def exemple_7():
    d1 = {
        'a': 10,
        'b': 2,
        'c': 6,
    }

    d2 = {
        'd': 16,
        'e': 222,
        'f': 1,
    }

    print(d1)  # {'a': 10, 'b': 2, 'c': 6}
    print(d2)  # {'d': 16, 'e': 222, 'f': 1}
    d1.update(d2)
    print(d1)  # {'a': 10, 'b': 2, 'c': 6, 'd': 16, 'e': 222, 'f': 1}
    print(d2)  # {'d': 16, 'e': 222, 'f': 1}


# Перебор словаря
def exemple_8():
    d = {
        'a': 10,
        'b': 2,
        'c': 6,
    }

    # перебор по ключам (1 способ - по умолчанию)
    for key in d:
        print(key, d[key])

    # перебор по ключам (2 способ)
    for key in d.keys():
        print(key, d[key])

    # перебор по значениям
    for val in d.values():
        print(val)

    # перебор по ключам и значениям
    for key, val in d.items():
        print(key, val)


# -------------------------------------------------
# Кортежи

# Синтаксис


def exemple_9():
    # my_tuple = (значение1, значение2, ...)

    t1 = (1, 2, 3)
    t2 = 1, 2, 3  # то же самое, что в примере выше (можно не писать скобки)
    t3 = (12, 'eee', True, [1, 4, 6], ('first', 'two'), {1: 'one'}, 999)  # значением может быть любой тип данных


# Фишки кортежей

def exemple_10():
    # 1. Упаковка кортежа. Значения 1, 2, 3 и 'hello' автоматически упаковываются в кортеж
    my_tuple = 1, 2, 3, 'hello'

    # 2. Распаковка кортежа (или множественное присвоение)
    # 1 способ (через переменные)
    a = 1
    b = 2
    c = 3

    # 2 способ (через множественное присвоение)
    a, b, c = 1, 2, 3

    # 3. Обмен значениями между переменными
    # задача: поменять местами числа
    a = 1
    b = 2

    # 1 способ (через дополнительную переменную)
    c = a
    a = b
    b = c

    # 2 способ (через кортежи)
    a, b = b, a


# Когда использовать кортеж

def exemple_11():
    # 1. Требуется защитить элементы от изменений
    # 2. Необходимо экономить память (кортежи занимают в памяти меньше места, чем списки)
    # 3. При множественном присвоение

    # пример:
    d = {1: 'one', 2: 'two'}
    for key, val in d.items():
        print(key, val)

    # в данном примере метод словаря items возвращает кортежи, состоящие из пар ключ-значение

    # 4. Когда нужно вернуть несколько значений из функции
    def foo(a, b):
        return a ** 2, b ** 2

    a, b = 10, 20
    new_a, new_b = foo(a, b)


def exemple_12():
    url = 'https://chainid.network/chains.json'
    response = requests.get(url)
    data = response.json()

    for elem in data:
        decimals = elem['nativeCurrency']['decimals']
        if decimals != 18:
            print(elem['name'], elem['nativeCurrency']['symbol'], elem['nativeCurrency']['decimals'])


def main():
    exemple_2()


if __name__ == "__main__":
    main()
